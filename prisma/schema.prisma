generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
}

// MODELS

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  dailyHoroscope        DailyHoroscope[]       @relation(name: "userToDailyHoroscope")
  wordleUsers           WordleUsers[]          @relation(name: "userToWordle")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Horoscope {
  id                        String                   @id @default(cuid())
  sign                      String
  description               String
  enum                      HoroscopeSign
  dateStart                 DateTime
  dateEnd                   DateTime
  eclipticLongitudeA        Int
  eclipticLongitudeB        Int
  polarity                  String
  gloss                     String
  planet                    String
  element                   String
  sexDrive                  String?
  hustle                    String?
  vibe                      String?
  success                   String?
  dailyHoroscope            DailyHoroscope[]         @relation(name: "horoscopeToDailyHoroscope")
  horoscopeCompatibilitiesA CompatibilityHoroscope[] @relation(name: "signA")
  horoscopeCompatibilitiesB CompatibilityHoroscope[] @relation(name: "signB")
  createdAt                 DateTime                 @default(now()) @map("createdAt")
  updatedAt                 DateTime                 @updatedAt @map("updatedAt")

  @@unique([sign, dateStart, dateEnd])
}

model DailyHoroscope {
  id                    String    @id @default(cuid())
  authorId              String
  author                User      @relation(name: "userToDailyHoroscope", fields: [authorId], references: [id])
  horoscopeId           String
  horoscope             Horoscope @relation(name: "horoscopeToDailyHoroscope", fields: [horoscopeId], references: [id])
  story                 String    @db.Text
  date                  DateTime
  familyDescription     String?   @db.Text
  familyRating          Int?
  loveDescription       String?   @db.Text
  loveRating            Int?
  friendshipDescription String?   @db.Text
  friendshipRating      Int?
  careerDescription     String?   @db.Text
  careerRating          Int?
  moneyDescription      String?   @db.Text
  moneyRating           Int?
  healthDescription     String?   @db.Text
  healthRating          Int?
  happinessDescription  String?   @db.Text
  happinessRating       Int?
  travelDescription     String?   @db.Text
  travelRating          Int?
  isFeatured            Boolean   @default(true)
  isArchived            Boolean   @default(false)
  createdAt             DateTime  @default(now()) @map("createdAt")
  updatedAt             DateTime  @updatedAt @map("updatedAt")
}

model CompatibilityHoroscope {
  id            String    @id @default(cuid())
  signAId       String
  signA         Horoscope @relation(name: "signA", fields: [signAId], references: [id])
  signBId       String
  signB         Horoscope @relation(name: "signB", fields: [signBId], references: [id])
  compatibility Int
  description   String
  sex           String?   @db.Text
  friendship    String?   @db.Text
  family        String?   @db.Text
  work          String?   @db.Text
  love          String?   @db.Text
  planets       String?   @db.Text
  paragraph     String?   @db.Text
  summary       String?   @db.Text
  isFeatured    Boolean   @default(true)
  isArchived    Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime  @updatedAt @map("updatedAt")

  @@unique([signAId, signBId])
}

model PlanetHoroscope {
  id          String          @id @default(cuid())
  planet      String
  enum        HoroscopePlanet
  description String
  nature      String
  keywords    String[]
  transition  String
  within      String[]
  life        String[]
  createdAt   DateTime        @default(now()) @map("createdAt")
  updatedAt   DateTime        @updatedAt @map("updatedAt")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  // horoscope Horoscope[] @relation(name: "horoscopeToImages")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model Wordle {
  id          String        @id @default(cuid())
  word        String
  date        DateTime
  wordleUsers WordleUsers[] @relation(name: "wordleToUser")
  createdAt   DateTime      @default(now()) @map("createdAt")
  updatedAt   DateTime      @updatedAt @map("updatedAt")
}

model WordleUsers {
  id       String  @id @default(cuid())
  wordleId String
  wordle   Wordle  @relation(name: "wordleToUser", fields: [wordleId], references: [id])
  userId   String
  user     User    @relation(name: "userToWordle", fields: [userId], references: [id])
  result   Boolean

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
}

// ENUMS

enum UserRole {
  ADMIN
  USER
}

enum HoroscopeSign {
  ARIES
  TAURUS
  GEMINI
  CANCER
  LEO
  VIRGO
  LIBRA
  SCORPIO
  SAGITTARIUS
  CAPRICORN
  AQUARIUS
  PISCES
}

enum HoroscopeType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum HoroscopeElement {
  FIRE
  EARTH
  AIR
  WATER
}

enum HoroscopePlanet {
  SUN
  MOON
  MERCURY
  VENUS
  MARS
  JUPITER
  SATURN
  URANUS
  NEPTUNE
  PLUTO
}
